# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
b_path <- b
# Here comes the cycle
for(k in 1:5){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
b_path
# Here comes the cycle
burn <- 1000
sample_size <- 5000
sample_size <- 10
# Here comes the cycle
burn <- 4
1:(burn + sample_size)
# Step 1. Inintialise b0
b <- rep(0,3)
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(20,3))))
}
# Here comes the cycle
burn <- 4
sample_size <- 10
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
b_path
# Step 1. Inintialise b0
b <- rep(0,3)
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(20,3))))
}
# Here comes the cycle
burn <- 4
sample_size <- 10
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
b_path
# Here comes the cycle
burn <- 4000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
par(mfrow=c(3,1))
plot(b_path[,1],type='l')
plot(b_path[,2],type='l')
plot(b_path[,3],type='l')
plot(b_path[burn + c(1:sample_size),1],type='l')
plot(b_path[burn + c(1:sample_size),2],type='l')
plot(b_path[burn + c(1:sample_size),3],type='l')
hist(b_path[burn + c(1:sample_size),1])
hist(b_path[burn + c(1:sample_size),2])
hist(b_path[burn + c(1:sample_size),3])
blr$coefficients
# Step 1. Inintialise b0
b <- rep(0,3)
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 10000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
par(mfrow=c(3,2))
plot(b_path[burn + c(1:sample_size),1],type='l')
hist(b_path[burn + c(1:sample_size),1])
plot(b_path[burn + c(1:sample_size),2],type='l')
hist(b_path[burn + c(1:sample_size),2])
plot(b_path[burn + c(1:sample_size),3],type='l')
hist(b_path[burn + c(1:sample_size),3])
blr$coefficients
# Step 1. Inintialise b0
b <- rep(0,3)
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 50000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
par(mfrow=c(3,2))
plot(b_path[burn + c(1:sample_size),1],type='l')
hist(b_path[burn + c(1:sample_size),1])
plot(b_path[burn + c(1:sample_size),2],type='l')
hist(b_path[burn + c(1:sample_size),2])
plot(b_path[burn + c(1:sample_size),3],type='l')
hist(b_path[burn + c(1:sample_size),3])
blr$coefficients
# Here comes the cycle
burn <- 1000000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
dim(b_path)
nrow(b_path)
c(999:0)
nrow(b_path) - c(999:0)
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
blr$coefficients
# Step 1. Inintialise b0
b <- blr$coefficients
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 1000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(10,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
par(mfrow=c(3,2))
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
blr$coefficients
# Step 1. Inintialise b0
b <- blr$coefficients
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 1000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(1,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
par(mfrow=c(3,2))
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
blr$coefficients
# Here comes the cycle
burn <- 10000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(1,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
blr$coefficients
apply(b_path,1,mean)
blr$coefficients
apply(b_path,2,mean)
# Step 1. Inintialise b0
b <- blr$coefficients
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 10000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(1,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
apply(b_path,2,mean)
blr$coefficients
# Step 1. Inintialise b0
b <- blr$coefficients
b_path <- b
prior <- function(b){
return(dmvnorm(b,rep(0,3),diag(rep(50,3))))
}
# Here comes the cycle
burn <- 5000
sample_size <- 1000
for(k in 1:(burn + sample_size)){
# Step 2. Sample a new value b_new from distribution q(b)
b_prop <- rmnorm(n = 1, mean = b, varcov = diag(rep(2,3)))
# Step 3. Compute the acceptance radio
R <- Lik(b_prop)*prior(b_prop) / (Lik(b)*prior(b))
# Step 4. Select new value of b via the Markov Chanin
if(runif(1) < R){
b <- b_prop
}
b_path <- rbind(b_path,b)
}
plot(b_path[nrow(b_path) - c(999:0),1],type='l')
hist(b_path[nrow(b_path) - c(999:0),1])
plot(b_path[nrow(b_path) - c(999:0),2],type='l')
hist(b_path[nrow(b_path) - c(999:0),2])
plot(b_path[nrow(b_path) - c(999:0),3],type='l')
hist(b_path[nrow(b_path) - c(999:0),3])
apply(b_path,2,mean)
blr$coefficients
summary(blr)
aux <- summary(blr)
aux$coefficients
aux$coefficients[1]
aux$coefficients[,1]
aux$cov.unscaled
blr$qr
blr$R
# data
logistic_dat <- list(N = 100,
y = df$y, x1 = df$x1, x2 = df$x2,
b0_init = 0, b1_init = 0, b2_init = 0,
sig = 0)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
# data
logistic_dat <- list(N = 100,
y = df$y, x1 = df$x1, x2 = df$x2,
b0_init = 0, b1_init = 0, b2_init = 0,
sig = 50)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
print(MCMC_log_reg)
plot(MCMC_log_reg)
blr$coefficients
MCMC_log_reg$b0
MCMC_log_reg$`p[1]`
stan_hist(MCMC_log_reg, pars = c('b0','b1','b2'))
blr %>% summary()
blr %>% summary() %>% .$cov.unscaled
blr %>% summary() %>% .$cov.unscaled %>% diag()
blr %>% summary() %>% .$cov.unscaled %>% diag() %>% mean()
# data
logistic_dat <- list(N = 100,
y = df$y, x1 = df$x1, x2 = df$x2,
b0_init = blr$coefficients[1],
b1_init = blr$coefficients[2],
b2_init = blr$coefficients[3],
sig = 20)
# run model
MCMC_log_reg <- stan(file = 'bayes_log_reg.stan', data = logistic_dat)
stan_hist(MCMC_log_reg, pars = c('b0','b1','b2'))
plot(MCMC_log_reg,pars = c('b0','b1','b2'))
summary(MCMC_log_reg)
aux2 <- summary(MCMC_log_reg)
aux2$summary
str(aux2)
str(aux2$summary)
str(aux2$summary[[1]])
dimnames(aux2$summary)
stan_trace(MCMC_log_reg, pars = c('b0','b1','b2'))
stan_trace(MCMC_log_reg, pars = 'b0')
log_reg_stats <- print(MCMC_log_reg)
str(log_reg_stats)
log_reg_stats
stan_plot(MCMC_log_reg)
stan_dense(MCMC_log_reg)
stan_dens(MCMC_log_reg)
stan_dens(MCMC_log_reg,pars = c('b0','b1','b2'))
stan_scat(MCMC_log_reg,pars = c('b0','b1','b2'))
stan_scat(MCMC_log_reg,pars = c('b0','b1'))
stan_scat(MCMC_log_reg,pars = c('b2','b1'))
stan_scat(MCMC_log_reg,pars = c('b2','b0'))
stan_ac(MCMC_log_reg,pars = c('b0','b1','b2'))
plot(MCMC_log_reg, plotfun = 'rhat')
plot(MCMC_log_reg, plotfun = 'trace')
stan_trace(MCMC_log_reg, pars = 'p[1]')
stan_trace(MCMC_log_reg, pars = c('p[50]')
)
print(MCMC_log_reg)
stan_trace(MCMC_log_reg, pars = c('p[68]'))
aux2 <- stan_trace(MCMC_log_reg, pars = c('b0','b1','b2'))
aux2
aux2$data
str(aux2$data)
aux2$data$value[aux2$data$parameter == 'b0']
hist(aux2$data$value[aux2$data$parameter == 'b0'])
mean(aux2$data$value[aux2$data$parameter == 'b0'])
print(MCMC_log_reg)
grid <- expand.grid(list(x1 = seq(0,1,length = 100), x2 = seq(0,1,length = 100)))
grid
dim(grid)
head(grid)
surface <-  1/(1+exp(-bayes_coeff[1] - bayes_coeff[1] * grid$x1 - bayes_coeff[2] * grid$x2))
traces <- stan_trace(MCMC_log_reg, pars = c('b0','b1','b2'))
bayes_coeff <- c(mean(traces$data$value[traces$data$parameter == 'b0']),
mean(traces$data$value[traces$data$parameter == 'b1']),
mean(traces$data$value[traces$data$parameter == 'b2']))
data.frame( our_coefficients = beta_hat$beta,
R_function = log_reg$coefficients,
Bayesian_regression = bayes_coeff)
surface <-  1/(1+exp(-bayes_coeff[1] - bayes_coeff[1] * grid$x1 - bayes_coeff[2] * grid$x2))
image(seq(0,1,length = 100),seq(0,1,length = 100),matrix(surface,ncol = 100),
col = rev(heat.colors(15)),
xlab = 'x1',ylab = 'x2', main = 'Logistic regression', asp = 1,
xlim = c(0,1), ylim = c(0,1))
points(df$x1,df$x2,col = unlist(lapply(df$y,function(x){ return(if_else(x==1,'black','blue'))})),
pch = 15)
grid$surface <-  1/(1+exp(-bayes_coeff[1] - bayes_coeff[1] * grid$x1 - bayes_coeff[2] * grid$x2))
head(grid)
dim(grid)
grid[c(9990:10000),]
grid[c(4500:4550),]
summary(grid)
bayes_coeff
grid$surface <-  1/(1+exp(-bayes_coeff[1] - bayes_coeff[2] * grid$x1 - bayes_coeff[3] * grid$x2))
bayes_coeff
summary(grid)
image(seq(0,1,length = 100),seq(0,1,length = 100),matrix(surface,ncol = 100),
col = rev(heat.colors(15)),
xlab = 'x1',ylab = 'x2', main = 'Bayesian Logistic regression', asp = 1,
xlim = c(0,1), ylim = c(0,1))
image(seq(0,1,length = 100),seq(0,1,length = 100),matrix(grid$surface,ncol = 100),
col = rev(heat.colors(15)),
xlab = 'x1',ylab = 'x2', main = 'Bayesian Logistic regression', asp = 1,
xlim = c(0,1), ylim = c(0,1))
points(df$x1,df$x2,col = unlist(lapply(df$y,function(x){ return(if_else(x==1,'black','blue'))})),
pch = 15)
legend(1.05, 0.6, c('y = 0', 'y = 1'),col = c('blue','black'),pch = 15, xpd = TRUE, bty = 'n')
par(mfrow=c(1,1))
image(seq(0,1,length = 100),seq(0,1,length = 100),matrix(grid$surface,ncol = 100),
col = rev(heat.colors(15)),
xlab = 'x1',ylab = 'x2', main = 'Bayesian Logistic regression', asp = 1,
xlim = c(0,1), ylim = c(0,1))
points(df$x1,df$x2,col = unlist(lapply(df$y,function(x){ return(if_else(x==1,'black','blue'))})),
pch = 15)
legend(1.05, 0.6, c('y = 0', 'y = 1'),col = c('blue','black'),pch = 15, xpd = TRUE, bty = 'n')
contour(x = seq(0,1,length = 100),
y = seq(0,1,length = 100),
z = matrix(grid$surface,ncol = 100),
levels = c(0.1,0.5,0.9),
add = TRUE)
par(col.main='white')
stan_dens(MCMC_log_reg,pars = c('b0','b1','b2'))
p
p <- stan_dens(MCMC_log_reg,pars = c('b0','b1','b2'))
p + title('beta 0')
p <- stan_dens(MCMC_log_reg,pars = c('b0'))
p + title('beta 0')
title('beta 0')
ggtitle('beta 0')
p <- stan_dens(MCMC_log_reg,pars = c('b0'))
p + ggtitle('beta 0')
stan_dens(MCMC_log_reg,pars = c('b0')) +
ggtitle('Constant') +
xlab('Constant') +
ylab('Density')
?density
density(traces$data$value[traces$data$parameter == 'b0'])
plot(density(traces$data$value[traces$data$parameter == 'b0']))
plot(density(traces$data$value[traces$data$parameter == 'b0']),fill = 'red')
traces$data %>% names()
density(traces$data$value[traces$data$parameter == 'b0'])
dens <- density(traces$data$value[traces$data$parameter == 'b0'])
str(dens)
dens$x
plot(dens$x,dens$y)
polygon(dens$x,rev(dens$y),col = 'red',alpha = 0.3)
polygon(c(dens$xrev(dens$x)),c(rev(dens$y),dens$y),col = 'red',alpha = 0.3)
polygon(c(dens$xrev(dens$x)),c(rev(dens$y),dens$y),col = 'red',alpha = 0.3)
polygon(c(dens$x,rev(dens$x)),c(rev(dens$y),dens$y),col = 'red',alpha = 0.3)
plot(dens$x,dens$y,col='white')
polygon(c(dens$x,rev(dens$x)),c(rev(dens$y),dens$y),col = 'red',alpha = 0.3)
plot(dens$x,dens$y,col='white')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),col = 'red',alpha = 0.3)
?polygon
plot(dens$x,dens$y,col='white')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(1,0,0,0.3))
par(mfrow = c(1,3))
dens <- density(traces$data$value[traces$data$parameter == 'b0'])
plot(dens$x,dens$y,col='white', xlab = 'Constant',ylab = 'Density')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(1,0,0,0.3))
dens <- density(traces$data$value[traces$data$parameter == 'b1'])
plot(dens$x,dens$y,col='white', xlab = 'x1',ylab = 'Density')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(0,1,0,0.3))
dens <- density(traces$data$value[traces$data$parameter == 'b2'])
plot(dens$x,dens$y,col='white', xlab = 'x2',ylab = 'Density')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(0,0,1,0.3))
dens <- density(traces$data$value[traces$data$parameter == 'b0'])
plot(dens$x,dens$y,col='white', xlab = 'Constant',ylab = 'Density')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(1,0,0,0.3))
dens <- density(traces$data$value[traces$data$parameter == 'b1'])
plot(dens$x,dens$y,col='white', xlab = 'x1',ylab = 'Density',
main = 'Bayesian Logistic Regression')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(0,1,0,0.3))
dens <- density(traces$data$value[traces$data$parameter == 'b2'])
plot(dens$x,dens$y,col='white', xlab = 'x2',ylab = 'Density')
polygon(c(dens$x,rev(dens$x)),c(rep(0,length(dens$x)),rev(dens$y)),
col = rgb(0,0,1,0.3))
